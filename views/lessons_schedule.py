from datetime import datetime

from telegram import ParseMode
from telegram.ext import ConversationHandler

from models.lessons import Lessons, SignedUpStudents
from models.students import Rating
from views import keyboards
from views.student_check import identify_student

LESSONS_DATE, CRAFT_THING = 1, 2


def show_lessons(update, context):
    all_dates = sorted([i.date for i in Lessons.objects()])
    all_dates = [i.strftime('%d.%m.%y (%a)') for i in all_dates]
    open_dates = [i.date.strftime('%d.%m.%y (%a)') for i in Lessons.objects() if len(i.signed_up_students) < i.slots]
    text = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:\n' \

    lessons_with_info = []
    for lesson in all_dates:
        if lesson in open_dates:
            lesson += ' üü¢'
        else:
            lesson += ' üî¥'

        lessons_with_info.append(lesson)
        text += f'{lesson}\n'

    text += '\n\nüü¢ - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞\nüî¥ - —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å–≤–æ–±–æ–¥—è—Ç—Å—è,' \
            '—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è'
    context.user_data['lessons_with_info'] = lessons_with_info

    update.message.reply_text(text, reply_markup=keyboards.lessons_dates_kb(lessons_with_info))
    return LESSONS_DATE


def sign_up(update, context):
    received_text = update.effective_message.text

    if received_text == '–û—Ç–º–µ–Ω–∞':
        text = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π —É—Ä–æ–∫'
        update.message.reply_text(text, reply_markup=keyboards.main_kb, parse_mode=ParseMode.HTML)
        return ConversationHandler.END

    else:
        wanted_date = datetime.strptime(received_text[:8], '%d.%m.%y').date()
        existing_lesson = Lessons.objects(date=wanted_date)
        existing_lesson = existing_lesson.first() if existing_lesson else None

        if existing_lesson:
            context.user_data['existing_lesson'] = existing_lesson

            # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            if len(existing_lesson.signed_up_students) < existing_lesson.slots:
                existing_student = identify_student(update)

                if existing_lesson.id in existing_student.registrations:
                    text = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫'
                    update.message.reply_text(text, reply_markup=keyboards.main_kb, parse_mode=ParseMode.HTML)
                    return ConversationHandler.END

                else:
                    text = f'–ß—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å –Ω–∞ —É—Ä–æ–∫–µ? '
                    update.message.reply_text(text, reply_markup=keyboards.cancel_kb, parse_mode=ParseMode.HTML)
                    return CRAFT_THING

            # –µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –º–µ—Å—Ç –Ω–µ—Ç, —Å—Ç–∞–≤–∏—Ç –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
            else:
                existing_student = identify_student(update)
                existing_student.awaiting.append(existing_lesson.id)
                existing_student.save()

                existing_lesson.awaiting_students.append(existing_student.id)
                existing_lesson.save()

                text = f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏—Å—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ <b>{existing_lesson.date}</b>. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–∫–∞–∂–µ—Ç—Å—è –æ—Ç ' \
                       f'–ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.'

                update.message.reply_text(text, reply_markup=keyboards.main_kb, parse_mode=ParseMode.HTML)
                return ConversationHandler.END

        else:
            text = '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.'
            update.message.reply_text(
                text,
                reply_markup=keyboards.lessons_dates_kb(context.user_data.get('lessons_with_info')),
                parse_mode=ParseMode.HTML
            )


def thing_to_craft(update, context):
    received_text = update.effective_message.text

    if received_text == '–û—Ç–º–µ–Ω–∞':
        text = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π —É—Ä–æ–∫'
        update.message.reply_text(text, reply_markup=keyboards.main_kb, parse_mode=ParseMode.HTML)
        return ConversationHandler.END

    else:
        existing_student = identify_student(update)
        existing_lesson = context.user_data.get('existing_lesson')

        existing_student.registrations.append(existing_lesson.id)
        existing_student.rating.registrations += 1
        existing_student.save()

        student_info = SignedUpStudents()
        student_info.student = existing_student.id
        student_info.confirmation = False
        student_info.craft_thing = received_text
        # TODO: –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å
        # student_info.probability_of_arrival =

        existing_lesson.signed_up_students.append(student_info)
        existing_lesson.save()

        text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–π —É—Ä–æ–∫ <b>{existing_lesson.date}</b>'
        update.message.reply_text(text, reply_markup=keyboards.main_kb, parse_mode=ParseMode.HTML)
        return ConversationHandler.END
